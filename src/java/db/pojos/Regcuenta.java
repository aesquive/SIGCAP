package db.pojos;
// Generated 26/06/2014 12:43:36 AM by Hibernate Tools 3.6.0

import db.controller.DAO;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import util.CompareObjectReport;
import util.NDimensionVector;
import util.Util;

/**
 * Regcuenta generated by hbm2java
 */
public class Regcuenta implements java.io.Serializable, Cloneable {

    private Integer idRegCuenta;
    private String desRegCuenta;
    private Date fecha;
    private Set catalogominimos = new HashSet(0);
    private Set disponibilidads = new HashSet(0);
    private Set ingresosnetoses = new HashSet(0);
    private Set valoreses = new HashSet(0);
    private Set tarjetacreditos = new HashSet(0);
    private Set reservases = new HashSet(0);
    private Set prestamos = new HashSet(0);
    private Set regcuentausers = new HashSet(0);
    private Set cuentas = new HashSet(0);
    private Set captacions = new HashSet(0);
    private Set consistencias = new HashSet(0);

    public Regcuenta() {
    }

    public Regcuenta(String desRegCuenta) {
        this.desRegCuenta = desRegCuenta;
    }

    public Regcuenta(String desRegCuenta, Date fecha, Set catalogominimos, Set disponibilidads, Set ingresosnetoses, Set valoreses, Set tarjetacreditos, Set reservases, Set prestamos, Set regcuentausers, Set cuentas, Set captacions, Set consistencias) {
        this.desRegCuenta = desRegCuenta;
        this.fecha = fecha;
        this.catalogominimos = catalogominimos;
        this.disponibilidads = disponibilidads;
        this.ingresosnetoses = ingresosnetoses;
        this.valoreses = valoreses;
        this.tarjetacreditos = tarjetacreditos;
        this.reservases = reservases;
        this.prestamos = prestamos;
        this.regcuentausers = regcuentausers;
        this.cuentas = cuentas;
        this.captacions = captacions;
        this.consistencias = consistencias;
    }

    public Integer getIdRegCuenta() {
        return this.idRegCuenta;
    }

    public void setIdRegCuenta(Integer idRegCuenta) {
        this.idRegCuenta = idRegCuenta;
    }

    public String getDesRegCuenta() {
        return this.desRegCuenta;
    }

    public void setDesRegCuenta(String desRegCuenta) {
        this.desRegCuenta = desRegCuenta;
    }

    public Date getFecha() {
        return this.fecha;
    }

    public void setFecha(Date fecha) {
        this.fecha = fecha;
    }

    public Set getCatalogominimos() {
        return this.catalogominimos;
    }

    public void setCatalogominimos(Set catalogominimos) {
        this.catalogominimos = catalogominimos;
    }

    public Set getDisponibilidads() {
        return this.disponibilidads;
    }

    public void setDisponibilidads(Set disponibilidads) {
        this.disponibilidads = disponibilidads;
    }

    public Set getIngresosnetoses() {
        return this.ingresosnetoses;
    }

    public void setIngresosnetoses(Set ingresosnetoses) {
        this.ingresosnetoses = ingresosnetoses;
    }

    public Set getValoreses() {
        return this.valoreses;
    }

    public void setValoreses(Set valoreses) {
        this.valoreses = valoreses;
    }

    public Set getTarjetacreditos() {
        return this.tarjetacreditos;
    }

    public void setTarjetacreditos(Set tarjetacreditos) {
        this.tarjetacreditos = tarjetacreditos;
    }

    public Set getReservases() {
        return this.reservases;
    }

    public void setReservases(Set reservases) {
        this.reservases = reservases;
    }

    public Set getPrestamos() {
        return this.prestamos;
    }

    public void setPrestamos(Set prestamos) {
        this.prestamos = prestamos;
    }

    public Set getRegcuentausers() {
        return this.regcuentausers;
    }

    public void setRegcuentausers(Set regcuentausers) {
        this.regcuentausers = regcuentausers;
    }

    public Set getCuentas() {
        return this.cuentas;
    }

    public void setCuentas(Set cuentas) {
        this.cuentas = cuentas;
    }

    public Set getCaptacions() {
        return this.captacions;
    }

    public void setCaptacions(Set captacions) {
        this.captacions = captacions;
    }

    /**
     * Se encarga de comparar dos ejercicios y darnos la variacion entre ellos ,
     * se le debe pasar la variacion maxima que toleraremos , asi como el numero
     * de Registros deseados, si el numero de registros es negativo entonces se
     * daran todos los registros
     *
     * @param comparable
     * @param minVariance
     * @param numberRegisters
     * @return regresa un mapeo que contiene <1 , <numCuenta,val1,val2,comp>>
     * <2,<numCuenta,val1,val2,comp>> asi hasta cumplir con los registros
     * requeridos
     *
     */
    public List<CompareObjectReport> compareProjects(Regcuenta comparable, double minVariance, int numberRegisters, Collection<Cuenta> ownCuentasParam, Collection<Cuenta> otherCuentasParam) {
        List<Catalogocuenta> catCtas = sacarCatalogosCuentas(ownCuentasParam, otherCuentasParam);
        List<CompareObjectReport> ans = new LinkedList<CompareObjectReport>();
        Map<String, Cuenta> ctasPrimeroMapeadas = mapCuentas(ownCuentasParam);
        Map<String, Cuenta> ctasSegundoMapeadas = mapCuentas(otherCuentasParam);
        for (Catalogocuenta c : catCtas) {
            Cuenta primera = ctasPrimeroMapeadas.get(c.getIdCatalogoCuenta().toString());
            Cuenta dos = ctasSegundoMapeadas.get(c.getIdCatalogoCuenta().toString());
            Double valorUno = Double.NaN;
            Double valorDos = Double.NaN;
            
            if (dos != null) {
                if (dos.getValor() != null) {
                    valorDos = dos.getValor();
                }
            }
            if (primera != null) {
                if (primera.getValor() != null) {
                    valorUno = primera.getValor();
                }
            }
            CompareObjectReport com = new CompareObjectReport(c, valorUno, valorDos);
            ans.add(com);
        }
        return ans;
    }

    private Map<String, Cuenta> mapCuentas(Collection<Cuenta> ownCuentasParam) {
        Map<String, Cuenta> map = new HashMap<String, Cuenta>();
        for (Cuenta c : ownCuentasParam) {
            map.put(c.getCatalogocuenta().getIdCatalogoCuenta().toString(), c);
        }
        return map;
    }

    private List<Catalogocuenta> sacarCatalogosCuentas(Collection<Cuenta> ctasUno, Collection<Cuenta> ctasDos) {
        List<Catalogocuenta> lis = new LinkedList<Catalogocuenta>();
        for (Cuenta c : ctasUno) {
            if (c.getCatalogocuenta() != null && c.getValor()!=null) {
                lis.add(c.getCatalogocuenta());
            }
        }
        for (Cuenta c : ctasDos) {
            if (c.getCatalogocuenta() != null && c.getValor()!=null) {
                lis.add(c.getCatalogocuenta());
            }
        }
        return lis;
    }

    public static void main(String[] args) {
        List<Regcuenta> createQuery = DAO.createQuery(Regcuenta.class, null);
        Regcuenta get = createQuery.get(0);
//        Map<Integer, NDimensionVector> compareProjects = get.compareProjects(createQuery.get(1), 0.0, -1);
//        System.out.println(compareProjects.get(2).getValues());
    }

    @Override
    public String toString() {
        return String.valueOf(idRegCuenta);
    }

    @Override
    public Object clone() throws CloneNotSupportedException {
        return super.clone();
    }

    private Map<String, Cuenta> mapCuentas(Regcuenta regCta, Collection<Cuenta> cuentas) {
        Map<String, Cuenta> ans = new HashMap<String, Cuenta>();
        for (Cuenta c : cuentas) {
            ans.put(c.getCatalogocuenta().getIdCatalogoCuenta().toString(), c);
        }
        return ans;
    }

    public Cuenta getCuenta(String numberCount, Collection<Cuenta> cuentas1) {
        for (Cuenta c : cuentas1) {
            if (c.getRegcuenta().getIdRegCuenta().toString().equals(this.getIdRegCuenta().toString())
                    && c.getCatalogocuenta().getIdCatalogoCuenta().toString().equals(numberCount)) {
                return c;
            }
        }
        return null;
    }

    public Cuenta getCuentaByCatalogoId(String id, Collection<Cuenta> cuentas1) {
        for (Cuenta c : cuentas1) {
            if (c.getRegcuenta().getIdRegCuenta().toString().equals(this.getIdRegCuenta().toString())
                    && c.getCatalogocuenta().getIdCatalogoCuenta().toString().equals(id)) {
                return c;
            }
        }
        return null;
    }

    /**
     * @return the consistencias
     */
    public Set getConsistencias() {
        return consistencias;
    }

    /**
     * @param consistencias the consistencias to set
     */
    public void setConsistencias(Set consistencias) {
        this.consistencias = consistencias;
    }

}
